//@author: a0086002u



	/**
	 * origin: C:\Users\Emmanuel\Documents\Github\main\BoxIn\BoxIn\parser.cpp
	 */

#include "parser.h"

using namespace std;

Parser::Parser(void){
	string command = "";
	string name = "";
	string location = "";
	string date = "";
	string time = "";
	string index = "";
}

void Parser::setInput(KEYWORD choice){
	switch (choice){
	case ADD:
		command = "Add";
		break;
	case DISPLAY:
		command = "Display";
		break;
	case DELETE:
		command = "Delete";
		break;
	case EDIT:
		command = "Edit";
		break;
	case UNDO:
		command = "Undo";
		break;
	case RESET:
		command = "Reset";
		break;
	default:
		command = "Invalid";
	}
}

string Parser::getCommand(){
	return command;
}

string Parser::getName(){
	return name;
}

string Parser::getLocation(){
	return location;
}

string Parser::getDate(){
	return date;
}

string Parser::getTime(){
	return time;
}

string Parser::getIndex(){
	return index;
}

/* this method search through a if/else statement to determine if one of the function call is there
*if it is detected, it will return the keyword
*logic for the controller later*/
Parser::KEYWORD Parser::getKeyword(string keyword){
	int i = 0;
	if (boost::iequals(keyword, "Add"))
		i = 1;
	else if (boost::iequals(keyword, "Display"))
		i = 2;
	else if (boost::iequals(keyword, "Delete"))
		i = 3;
	else if (boost::iequals(keyword, "Edit"))
		i = 4;
	else if (boost::iequals(keyword, "Undo"))
		i = 5;
	else if (boost::iequals(keyword, "Reset"))
		i = 6;
	else if (boost::iequals(keyword, "Date"))
		i = 7;
	else if (boost::iequals(keyword, "Time"))
		i = 8;
	else i = 9;
	return KEYWORD(i);
}

string Parser::getFirstWord(string command){
	stringstream str;
	string firstWord;
	str << command;
	str >> firstWord;
	return firstWord;
}

//using the strings, and the looping to find the date based on the array
int Parser::getDateIndex(string command){
	int index;
	string date[] = { " today", " tomorrow", " monday",
		" tuesday", " wednesday", " thursday", " friday",
		" saturday", " sunday" };
	for (int i = 0; i < 9; i++){
		index = command.find(date[i]);
	}
	return index;
}

string Parser::editDate(string command){
	int index;
	index = getDateIndex(command);
	command.insert(index + 1, "Date ");
	return command;
}

int Parser::getNextIndex(vector<string>index, int initial){
	int i = 0;
	for (i = initial; i < index.size(); i++){
		if (isKeyword(index[i]))
			break;
	}
	return i;
}

bool Parser::isKeyword(string word){
	bool value = false;
	if (getKeyword(word) != INVALID)
		value = true;
	return value;
}

//these help find name, location, index, time,date for the edit function later on
bool Parser::hasName(){
	if (name == "")
		return false;
	return true;
}

bool Parser::hasLocation(){
	if (location == "")
		return false;
	return true;
}

bool Parser::hasIndex(){
	if (index == "")
		return false;
	return true;
}

bool Parser::hasTime(){
	if (time == "")
		return false;
	return true;
}

bool Parser::hasDate(){
	if (date == "")
		return false;
	return true;
}

bool Parser::canDo(string keyword){
	bool value = false;
	if (boost::iequals(keyword, "Add")){
		if (canAdd())
			value = true;
	}
	else if (boost::iequals(keyword, "Display")){
		if (canDisplay())
			value = true;
	}
	else if (boost::iequals(keyword, "Delete")){
		if (canDelete())
			value = true;
	}
	else if (boost::iequals(keyword, "Edit")){
		if (canEdit())
			value = true;
	}
	else if (boost::iequals(keyword, "Undo"))
		value = true;
	else if (boost::iequals(keyword, "Reset"))
		value = true;
	return value;
}

bool Parser::canAdd(){
	if (isValidName() && isValidTime() && isValidDate())
		return true;
	return false;
}

//checks if the name/time/date are valid
bool Parser::isValidName(){
	//stub
	return true;
}

bool Parser::isValidTime(){
	//stub
	return true;
}

bool Parser::isValidDate(){
	//stub
	return true;
}

//check if the edit is valid, if it is not valid, it will not work otherwie it will return the new edit to the user
bool Parser::canEdit(){
	bool value = false;
	if (hasName())
		if (isValidName())
			value = true;
	if (hasTime())
		if (isValidTime())
			value = true;
	if (hasDate())
		if (isValidDate())
			value = true;
	if (isValidIndex())
		value = true;
	return value;
}

bool Parser::canDisplay(){
	//stub
	return true;
}

bool Parser::canDelete(){
	if (isValidIndex())
		return true;
	return false;
}

bool Parser::isValidIndex(){
	//stub - (self-note use boost tokenizer)
	return true;
}

void Parser::setEventDetails(Event eventObj){
	name = eventObj.getName();
	location = eventObj.getLocation();
	time = eventObj.getTime();
	date = eventObj.getDate();
}

	// End of segment: C:\Users\Emmanuel\Documents\Github\main\BoxIn\BoxIn\parser.cpp





	/**
	 * origin: C:\Users\Emmanuel\Documents\Github\main\BoxIn\BoxIn\parser.h
	 */

#pragma once

#include <sstream>
#include <string>
#include <vector>
#include <boost\algorithm\string.hpp>
#include "Event.h"

using namespace std;

class Parser{
private:
	string command;
	string name;
	string location;
	string date;
	string time;
	string index;
	
public:

	enum KEYWORD{
		ADD=1, DISPLAY, DELETE, EDIT, UNDO, RESET, DATE, TIME, INVALID
	};

	Parser(void);
	void setInput(KEYWORD);
	bool isKeyword(string);
	string getCommand();
	string getName();
	string getLocation();
	string getDate();
	string getTime();
	string getIndex();
	KEYWORD getKeyword(string);
	string getFirstWord(string);
	int getDateIndex(string);
	string editDate(string);
	int getNextIndex(vector<string>, int);

	bool hasName();
	bool hasLocation();
	bool hasIndex();
	bool hasTime();
	bool hasDate();
	bool canDo(string);
	bool canAdd();
	bool canEdit();
	bool isValidName();
	bool isValidTime();
	bool isValidDate();
	bool canDisplay();
	bool canDelete();
	bool isValidIndex();

	void setEventDetails(Event);

	~Parser(void);
};

	// End of segment: C:\Users\Emmanuel\Documents\Github\main\BoxIn\BoxIn\parser.h





	/**
	 * origin: C:\Users\Emmanuel\Documents\Github\main\BoxIn\BoxIn\TimeData.cpp
	 */

#include "TimeData.h"

Time::Time(void)
{
	hour=0;
	minutes=0;
	period="";
}

Time::Time(int hour, int minutes, string period)
{
	hour = hour;
	minutes = minutes;
	period = period;
}

void Time::setPeriod(string period)
{
	this->period=period;
}

string Time::getPeriod()
{
	return period;
}

void Time::setHour(int hour)
{
	this->hour=hour;
}

int Time::getHour()
{
	return hour;
}

void Time::setMinutes(int minutes)
{
	this->minutes=minutes;
}

int Time::getMinutes()
{
	return minutes;
}

bool Time::isGreaterThan(Time time2)
{
	bool flag;
	int temphour1=0,temphour2=0;
	if(this->period=="am" && time2.period=="pm")
		flag=false;
	else if(this->period=="pm" && time2.period=="am")
		flag=true;
	else
	{
		if(this->hour==12)
			temphour1=0;
		else 
			temphour1=this->hour;
		
		if(time2.hour==12)
			temphour2=0;
		else 
			temphour2=time2.hour;
		
		if( temphour1 > temphour2)
			flag=true;
		else if(temphour1 < temphour2)
			flag=false;
		else if(this->minutes > time2.minutes)
			flag=true;
		else if(this->minutes <= time2.minutes)
			flag=false;
	}

	return flag;

}

string Time::formatTime()
{
	int hour=getHour(), min= getMinutes();
	string period=getPeriod();
	stringstream result;
	
	result << hour;
	if (min!=0)
	{
		result << ".";
	
		if (min<10)
			result <<'0';
		result << min;
	}
	return result.str();
}

string Time::formatCompleteTime(Time Obj)
{
	
	string formattedTime =formatTime();
	if (Obj.getPeriod()!="")
	{
		formattedTime+=" to ";
		formattedTime+=Obj.formatTime();
	}
	return formattedTime;
}

void Time::timeStringToObject(string time)
{
	vector<string> tokenizedTime=tokenizeTime(time);
	if(tokenizedTime.size()==2) //4pm, 5pm
	{
		if(hasPeriod(tokenizedTime)==1)
		{
			int hour=atoi(tokenizedTime[0].c_str());
			string period=tokenizedTime[1];

			setHour(hour);
			setPeriod(period);
		}
	}
	else if(tokenizedTime.size()==3) //430pm, 530pm
	{
		if(hasPeriod(tokenizedTime)==2)
		{
			int hour=atoi(tokenizedTime[0].c_str());
			int minutes=atoi(tokenizedTime[1].c_str());
			string am_pm=tokenizedTime[2];

			setHour(hour);
			setMinutes(minutes);
			setPeriod(period);
		}
	}
}

bool Time::isValidTime()
{
	bool flag=true;
	if(getHour()<1 || getHour()>12)
		flag=false;
	if(getMinutes()<0 || getMinutes()>59)
		flag=false;
	return flag;
}

int Time::hasPeriod(vector<string> tokenizedTime)
{
	for(unsigned int i=0;i<tokenizedTime.size();i++)
	{
		if((tokenizedTime[i] == "am") || (tokenizedTime[i] == "pm"))
			return i;
	}
	return -1;
}

vector<string> Time::tokenizeTime(string timeToTokenize)
{
	vector<string> tokenizedTime;
	char *pch, *str;
	str = new char [timeToTokenize.size()+1];
	strcpy(str, timeToTokenize.c_str());
	string tempTime;

	pch = strtok(str,":. ");
	while(pch!=NULL)
	{
		tempTime=pch;
		if(tempTime.size()>2)
		{
			int index=findPeriod(tempTime);
			if(index!=-1)
			{
				tokenizedTime.push_back(tempTime.substr(0,index));
				tokenizedTime.push_back(tempTime.substr(index,2));
			}
			else
				tokenizedTime.push_back(tempTime);
		}
		else
			tokenizedTime.push_back(tempTime);
		pch=strtok(NULL,":. ");
	}
	return tokenizedTime;
}

int Time::findPeriod(string timeToBeTested)
{
	int pos=timeToBeTested.find("am");
	int pos2=timeToBeTested.find("pm");
	
	if(pos>-1)
		return pos;
	else if (pos2>-1)
		return pos2;
	return -1;
}

void Time::incrementTime(int mins)
{
	assert(mins>=0);
	for(int i=1;i<=mins;i++)
	{
		minutes++;
		if (minutes==60)
		{
			hour++;
			if(hour==12)
			{
				if (period=="am")
					period="pm";
	
				else 
				{
					period="am";
					hour=0;
				}
			}
			minutes = 0;
		}
	}
	return;
}

bool Time::isEqual(Time Obj)
{
	if (period==Obj.getPeriod())
	{
		if (minutes ==Obj.getMinutes() && hour==Obj.getHour())
			return true;
	}
	return false;
}

Time::~Time(void)
{
}

	// End of segment: C:\Users\Emmanuel\Documents\Github\main\BoxIn\BoxIn\TimeData.cpp





	/**
	 * origin: C:\Users\Emmanuel\Documents\Github\main\BoxIn\BoxIn\TimeData.h
	 */

#ifndef _TIME_H
#define _TIME_H

#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <string>
#include <sstream>
#include <vector>
#include <cassert>

using namespace std;

class Time
{
public:
	Time(void);
	Time(int, int,string);

	~Time(void);

	int getHour();
	int getMinutes();
	void setHour(int);
	void setMinutes(int);
	string getPeriod();
	void setPeriod(string);
	bool isGreaterThan(Time);
	string formatTime();
	void timeStringToObject(string time);
	bool isValidTime();
	string formatCompleteTime(Time Obj);
	void incrementTime(int mins);
	bool isEqual(Time Obj);

private:
	int hour;
	int minutes;
	string period;

	int findPeriod(string timeToBeTested);
	int hasPeriod(vector<string> tokenizedTime);
	vector<string> tokenizeTime(string timeToTokenize);


};

#endif

	// End of segment: C:\Users\Emmanuel\Documents\Github\main\BoxIn\BoxIn\TimeData.h





